{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { Badge, Row, Col, Card, message, Button, Empty, Input, Typography, Table, Dropdown, Menu, Icon, Modal, Tag, Descriptions } from 'antd';\nimport React, { useRef, useState, useEffect } from 'react';\nimport Head from 'next/head';\nimport Error from 'next/error';\nimport axios from 'axios';\nimport moment from 'moment';\nimport _ from 'lodash';\nimport Highlighter from 'react-highlight-words';\nimport ModelSider from '../components/MeModelSider';\nimport UserLayout from '../components/UserLayout';\nimport { withAuthSync } from '../utils/auth';\n\nfunction ModelTrain(props) {\n  if (props.errorCode) return React.createElement(Error, {\n    statusCode: props.errorCode\n  });\n  var selectedKeys = props.route.parsedUrl.pathname;\n  var searchInput = useRef(null);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      windowSize = _useState2[0],\n      setWindowSize = _useState2[1];\n\n  var _useState3 = useState(props.train),\n      _useState4 = _slicedToArray(_useState3, 2),\n      state = _useState4[0],\n      setState = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selected = _useState6[0],\n      setSelected = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      searchText = _useState8[0],\n      setSearchText = _useState8[1];\n\n  var _useState9 = useState({}),\n      _useState10 = _slicedToArray(_useState9, 2),\n      filteredInfo = _useState10[0],\n      setFilteredInfo = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      triggerExpand = _useState12[0],\n      setTriggerExpand = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      expandSelected = _useState14[0],\n      setExpandSelected = _useState14[1];\n\n  useEffect(function () {\n    window.addEventListener(\"resize\", handleResize);\n    return function () {\n      return window.addEventListener(\"resize\", null);\n    };\n  }, []);\n\n  var handleResize = function handleResize() {\n    setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  };\n\n  var createScriptItem = function createScriptItem(pos, data) {\n    var label = _(props.model.label).find(function (item) {\n      return item.name === data.label;\n    });\n\n    var element = document.createElement('span');\n    var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n    var scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;\n    element.className = 'annotation-script-item';\n    element.style.position = 'absolute';\n    element.style.top = \"\".concat(pos.top + scrollTop, \"px\");\n    element.style.left = \"\".concat(pos.left + scrollLeft, \"px\");\n    element.style.width = \"\".concat(pos.width, \"px\");\n    element.style.height = \"\".concat(pos.height, \"px\");\n    element.style.background = data.hasOwnProperty('label') ? label ? label.color + '70' : '#bfbfbf' : '#e6f7ff';\n    element.style.zIndex = 5;\n    document.body.appendChild(element);\n  };\n\n  var createLabelItem = function createLabelItem(pos, data) {\n    var label = _(props.model.label).find(function (item) {\n      return item.name === data.label;\n    });\n\n    var element = document.createElement('span');\n    var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n    var scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft;\n    element.className = 'annotation-script-item';\n    element.style.position = 'absolute';\n    element.style.color = '#fff';\n    element.innerText = data.label;\n    element.style.background = label ? label.color : '#595959';\n    element.style.padding = '0px 6px';\n    element.style.top = \"\".concat(pos.top + scrollTop - 15, \"px\");\n    element.style.left = \"\".concat(pos.left + scrollLeft, \"px\");\n    element.style.zIndex = 25;\n    document.body.appendChild(element);\n  };\n\n  var recursiveDefineLabel = function recursiveDefineLabel(data, node) {\n    _.forEach(data, function (item) {\n      var pos, range;\n      range = document.createRange();\n      range.setStart(node, item.startOffset);\n      range.setEnd(node, item.endOffset);\n      pos = range.getClientRects();\n\n      if (pos.length !== 0) {\n        if (item.label) {\n          createLabelItem(pos[0], item);\n\n          _.forEach(pos, function (n) {\n            createScriptItem(n, item);\n          });\n        } else {\n          _.forEach(pos, function (n) {\n            createScriptItem(n, item);\n          });\n        }\n\n        item.script && recursiveDefineLabel(item.script, node);\n      }\n    });\n  };\n\n  useEffect(function () {\n    if (props.model.annotator === 'extractor') {\n      var elementsScript = document.querySelectorAll(\".annotation-script\");\n\n      _.forEach(elementsScript, function (item) {\n        var trainIndex = _.findIndex(state, function (record) {\n          return record.id == item.dataset.source;\n        });\n\n        var dataTrain = state[trainIndex];\n        var elementText = item.childNodes[0];\n        dataTrain.extractor.forEach(function (item) {\n          var pos, range;\n          range = document.createRange();\n          range.setStart(elementText, item.startOffset);\n          range.setEnd(elementText, item.endOffset);\n          pos = range.getClientRects();\n\n          if (pos.length !== 0) {\n            createLabelItem(pos[0], item);\n\n            _.forEach(pos, function (n) {\n              createScriptItem(n, item);\n            });\n          }\n        });\n      });\n    } else if (props.model.annotator === 'pattern-extractor') {\n      var _elementsScript = document.querySelectorAll(\".annotation-script\");\n\n      _.forEach(_elementsScript, function (item) {\n        var trainIndex = _.findIndex(state, function (record) {\n          return record.id == item.dataset.source;\n        });\n\n        var dataTrain = state[trainIndex];\n        var elementText = item.childNodes[0];\n        recursiveDefineLabel(dataTrain.patternExtractor, elementText);\n      });\n    }\n\n    return function () {\n      var elementScriptItem = document.querySelectorAll('.annotation-script-item');\n      elementScriptItem.forEach(function (n) {\n        return document.body.removeChild(n);\n      });\n    };\n  }, [triggerExpand, expandSelected, windowSize, state]);\n\n  var handleVerify =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(ids, confirm) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios({\n                method: \"PATCH\",\n                url: \"\".concat(props.modelApi, \"/train\"),\n                data: {\n                  ids: _.flattenDeep([ids]),\n                  confirm: confirm\n                },\n                headers: {\n                  authorization: props.token\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n\n              if (response.status === 200) {\n                message.success('Training modified successfully.');\n                setState(response.data);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleVerify(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleRemove = function handleRemove(ids) {\n    var handleOk =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios({\n                  method: \"DELETE\",\n                  url: \"\".concat(props.modelApi, \"/train\"),\n                  headers: {\n                    authorization: props.token\n                  },\n                  data: {\n                    ids: _.flattenDeep([ids])\n                  }\n                });\n\n              case 2:\n                response = _context2.sent;\n\n                if (response.status === 200) {\n                  message.success('Training removed successfully.');\n                  setState(response.data);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function handleOk() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    Modal.confirm({\n      title: 'Are you sure?',\n      content: 'You will not be able to recover this train.',\n      okText: 'Yes',\n      onOk: handleOk,\n      cancelText: 'Cancel'\n    });\n  };\n\n  var expandedRowRender = function expandedRowRender(record) {\n    if (props.model.annotator === 'classifier') {\n      return React.createElement(\"div\", {\n        style: {\n          marginBottom: 16\n        }\n      }, React.createElement(Descriptions, {\n        title: \"Result Annotation\",\n        bordered: true,\n        border: true\n      }, React.createElement(Descriptions.Item, {\n        span: 3,\n        label: \"Created date\"\n      }, moment(record.createdAt).fromNow()), React.createElement(Descriptions.Item, {\n        span: 3,\n        label: \"Status\"\n      }, record.confirm ? React.createElement(Badge, {\n        color: \"green\",\n        text: \"Verified\"\n      }) : React.createElement(Badge, {\n        status: \"warning\",\n        text: \"Unverified\"\n      })), React.createElement(Descriptions.Item, {\n        span: 2,\n        label: \"User\"\n      }, \"\".concat(record.user.firstname, \" \").concat(record.user.lastname)), React.createElement(Descriptions.Item, {\n        span: 1,\n        label: \"Email\"\n      }, record.user.email), React.createElement(Descriptions.Item, {\n        span: 3,\n        label: \"Tags\"\n      }, record.classifier.map(function (item, key) {\n        var label = _(props.model.label).find(function (n) {\n          return n.name === item;\n        });\n\n        return React.createElement(Tag, {\n          key: key,\n          className: \"ant-custom\",\n          color: label ? label.color : '#595959',\n          style: {\n            marginBottom: 8\n          }\n        }, item);\n      })), React.createElement(Descriptions.Item, {\n        span: 3,\n        label: \"Text\"\n      }, record.source)));\n    }\n\n    return React.createElement(\"div\", {\n      style: {\n        marginBottom: 16\n      }\n    }, React.createElement(Descriptions, {\n      title: \"Result Annotation\",\n      bordered: true,\n      border: true\n    }, React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Created date\"\n    }, moment(record.createdAt).fromNow()), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Status\"\n    }, record.confirm ? React.createElement(Badge, {\n      color: \"green\",\n      text: \"Verified\"\n    }) : React.createElement(Badge, {\n      status: \"warning\",\n      text: \"Unverified\"\n    })), React.createElement(Descriptions.Item, {\n      span: 2,\n      label: \"User\"\n    }, \"\".concat(record.user.firstname, \" \").concat(record.user.lastname)), React.createElement(Descriptions.Item, {\n      span: 1,\n      label: \"Email\"\n    }, record.user.email), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Text\"\n    }, React.createElement(Typography.Paragraph, {\n      className: \"annotation-script\",\n      \"data-source\": record.id\n    }, record.source))));\n  };\n\n  var handleChange = function handleChange(pagination, filters, sorter) {\n    setFilteredInfo(filters);\n  };\n\n  var getColumnSearchProps = function getColumnSearchProps(dataIndex) {\n    return {\n      filterDropdown: function filterDropdown(_ref3) {\n        var setSelectedKeys = _ref3.setSelectedKeys,\n            selectedKeys = _ref3.selectedKeys,\n            confirm = _ref3.confirm,\n            clearFilters = _ref3.clearFilters;\n        return React.createElement(\"div\", {\n          style: {\n            padding: 8\n          }\n        }, React.createElement(Input, {\n          ref: searchInput,\n          placeholder: \"Search \".concat(dataIndex),\n          value: selectedKeys[0],\n          onChange: function onChange(e) {\n            return setSelectedKeys(e.target.value ? [e.target.value] : []);\n          },\n          onPressEnter: function onPressEnter() {\n            return handleSearch(selectedKeys, confirm);\n          },\n          style: {\n            width: 188,\n            marginBottom: 8,\n            display: 'block'\n          }\n        }), React.createElement(Button, {\n          type: \"primary\",\n          onClick: function onClick() {\n            return handleSearch(selectedKeys, confirm);\n          },\n          icon: \"search\",\n          size: \"small\",\n          style: {\n            width: 90,\n            marginRight: 8\n          }\n        }, \"Search\"), React.createElement(Button, {\n          onClick: function onClick() {\n            return handleReset(clearFilters);\n          },\n          size: \"small\",\n          style: {\n            width: 90\n          }\n        }, \"Reset\"));\n      },\n      filterIcon: function filterIcon(filtered) {\n        return React.createElement(Icon, {\n          type: \"search\",\n          style: {\n            color: filtered ? '#1890ff' : undefined\n          }\n        });\n      },\n      onFilter: function onFilter(value, record) {\n        return record[dataIndex].toString().toLowerCase().includes(value.toLowerCase());\n      },\n      onFilterDropdownVisibleChange: function onFilterDropdownVisibleChange(visible) {\n        if (visible) {\n          setTimeout(function () {\n            return searchInput.current.select();\n          });\n        }\n      },\n      render: function render(text) {\n        return React.createElement(Highlighter, {\n          className: \"table-text\",\n          highlightStyle: {\n            backgroundColor: '#ffc069',\n            padding: 0\n          },\n          searchWords: [searchText],\n          autoEscape: true,\n          textToHighlight: text\n        });\n      }\n    };\n  };\n\n  var handleSearch = function handleSearch(selectedKeys, confirm) {\n    confirm();\n    setSearchText(selectedKeys[0]);\n  };\n\n  var handleReset = function handleReset(clearFilters) {\n    clearFilters();\n    setSearchText('');\n  };\n\n  var columns = [_objectSpread({\n    key: 'text',\n    title: 'Source',\n    dataIndex: 'source'\n  }, getColumnSearchProps('source')), {\n    title: 'Status',\n    dataIndex: 'confirm',\n    width: 200,\n    align: 'center',\n    sorter: function sorter(a, b) {\n      return a.confirm - b.confirm;\n    },\n    render: function render(text, record) {\n      return text ? React.createElement(Badge, {\n        status: \"success\",\n        text: \"Verified\"\n      }) : React.createElement(Badge, {\n        status: \"warning\",\n        text: \"Unverified\"\n      });\n    }\n  }, {\n    key: 'operation',\n    width: 200,\n    align: 'right',\n    render: function render(text, record) {\n      var menu = React.createElement(Menu, null, !record.confirm && React.createElement(Menu.Item, {\n        key: \"0\"\n      }, React.createElement(\"a\", {\n        onClick: function onClick() {\n          return handleVerify(record.id, true);\n        }\n      }, \"Verify\")), record.confirm && React.createElement(Menu.Item, {\n        key: \"1\"\n      }, React.createElement(\"a\", {\n        onClick: function onClick() {\n          return handleVerify(record.id, false);\n        }\n      }, \"Unverify\")), React.createElement(Menu.Divider, null), React.createElement(Menu.Item, {\n        key: \"2\"\n      }, React.createElement(\"a\", {\n        onClick: function onClick() {\n          return handleRemove(record.id);\n        }\n      }, \"Remove\")));\n      return React.createElement(Dropdown, {\n        overlay: menu\n      }, React.createElement(Button, null, \"Action \", React.createElement(Icon, {\n        type: \"down\"\n      })));\n    }\n  }];\n  var tableTrain = {\n    rowKey: \"id\",\n    columns: columns,\n    dataSource: state,\n    onChange: handleChange,\n    rowSelection: {\n      selectedRowKeys: selected,\n      onChange: function onChange(selectedRowKeys) {\n        return setSelected(selectedRowKeys);\n      }\n    },\n    expandedRowRender: expandedRowRender,\n    onExpand: function onExpand(expanded, record) {\n      setTriggerExpand(expanded);\n      setExpandSelected(record);\n    }\n  };\n\n  var ComponentCardExtra = function ComponentCardExtra() {\n    var menu = React.createElement(Menu, null, React.createElement(Menu.Item, {\n      key: \"0\"\n    }, React.createElement(\"a\", {\n      onClick: function onClick() {\n        return handleVerify(selected, true);\n      }\n    }, \"Verify\")), React.createElement(Menu.Item, {\n      key: \"1\"\n    }, React.createElement(\"a\", {\n      onClick: function onClick() {\n        return handleVerify(selected, false);\n      }\n    }, \"Unverify\")), React.createElement(Menu.Divider, null), React.createElement(Menu.Item, {\n      key: \"2\"\n    }, React.createElement(\"a\", {\n      onClick: function onClick() {\n        return handleRemove(selected);\n      }\n    }, \"Remove\")));\n    return React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center'\n      }\n    }, React.createElement(Typography, {\n      style: {\n        marginRight: 16\n      }\n    }, \"Selected: \"), React.createElement(Dropdown, {\n      overlay: menu\n    }, React.createElement(Button, null, \"Action \", React.createElement(Icon, {\n      type: \"down\"\n    }))));\n  };\n\n  return React.createElement(UserLayout, props, React.createElement(Row, {\n    type: \"flex\",\n    gutter: 16\n  }, React.createElement(Head, null, React.createElement(\"title\", null, \"My Model Train - Sistem Anotasi Named Entity\")), React.createElement(Col, {\n    md: 6\n  }, React.createElement(ModelSider, {\n    current: selectedKeys,\n    dataSource: props.model\n  })), React.createElement(Col, {\n    md: 18\n  }, React.createElement(Card, {\n    title: \"Training Data\",\n    extra: React.createElement(ComponentCardExtra, null),\n    style: {\n      minHeight: '100%'\n    }\n  }, state.length !== 0 ? React.createElement(Table, tableTrain) : React.createElement(Empty, {\n    image: Empty.PRESENTED_IMAGE_SIMPLE\n  })))));\n}\n\nModelTrain.Layout = UserLayout;\n\nModelTrain.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(_ref4) {\n    var apiUrl, token, query, id, modelApi, model, train;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            apiUrl = _ref4.apiUrl, token = _ref4.token, query = _ref4.query;\n            id = query.id;\n            modelApi = \"\".concat(apiUrl, \"/model/\").concat(id);\n            _context3.prev = 3;\n            _context3.next = 6;\n            return axios({\n              method: \"GET\",\n              url: modelApi,\n              headers: {\n                authorization: token\n              }\n            }).then(function (res) {\n              return res.data;\n            });\n\n          case 6:\n            model = _context3.sent;\n            _context3.next = 9;\n            return axios({\n              method: \"GET\",\n              url: \"\".concat(modelApi, \"/train\"),\n              headers: {\n                authorization: token\n              }\n            }).then(function (res) {\n              return res.data;\n            });\n\n          case 9:\n            train = _context3.sent;\n            return _context3.abrupt(\"return\", {\n              model: model,\n              train: train,\n              modelApi: modelApi\n            });\n\n          case 13:\n            _context3.prev = 13;\n            _context3.t0 = _context3[\"catch\"](3);\n            return _context3.abrupt(\"return\", {\n              errorCode: _context3.t0.response.status\n            });\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[3, 13]]);\n  }));\n\n  return function (_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nexport default withAuthSync(ModelTrain);","map":null,"metadata":{},"sourceType":"module"}