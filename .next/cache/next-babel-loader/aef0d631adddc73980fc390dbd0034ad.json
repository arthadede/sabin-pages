{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _ from 'lodash';\nimport React from 'react';\nimport { Typography, Tag, Affix } from 'antd';\n\nfunction Classifier(props) {\n  var dataLabel = props.dataLabel.map(function (item) {\n    return _objectSpread({}, item, {\n      selected: props.value.find(function (n) {\n        return n === item.name;\n      }) ? true : false\n    });\n  });\n\n  var handleSet = function handleSet(text) {\n    if (_.includes(props.value, text)) {\n      props.onChange(function (state) {\n        return props.value.filter(function (item) {\n          return item !== text;\n        });\n      });\n    } else {\n      props.onChange(function (state) {\n        return [].concat(_toConsumableArray(state), [text]);\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    style: {\n      minHeight: 500,\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, React.createElement(Affix, {\n    offsetTop: 10\n  }, React.createElement(\"div\", {\n    style: {\n      marginBottom: 16,\n      zIndex: 50\n    }\n  }, React.createElement(Typography.Text, {\n    type: \"secondary\",\n    style: {\n      marginRight: 16\n    }\n  }, \"Tags: \"), dataLabel.map(function (item, index) {\n    return React.createElement(Tag, {\n      key: index,\n      className: \"ant-custom\",\n      color: item.selected && item.color,\n      style: {\n        marginBottom: 8,\n        cursor: 'pointer'\n      },\n      onClick: function onClick() {\n        return handleSet(item.name);\n      }\n    }, item.name);\n  }))), React.createElement(\"div\", null, React.createElement(Typography.Paragraph, {\n    id: \"annotation-script\"\n  }, props.dataSource)));\n}\n\nexport default Classifier;","map":null,"metadata":{},"sourceType":"module"}