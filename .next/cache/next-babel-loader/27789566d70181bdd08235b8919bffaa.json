{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { Typography, Row, Col, Avatar, Statistic, List, Card, Icon } from \"antd\";\nimport Head from 'next/head';\nimport Error from 'next/error';\nimport _ from 'lodash';\nimport axios from \"axios\";\nimport moment from 'moment';\nimport React, { useState } from 'react';\nimport { Line, Doughnut } from 'react-chartjs-2';\nimport UserLayout from \"../components/UserLayout\";\nimport ModelSider from \"../components/MeModelSider\";\nimport { withAuthSync } from '../utils/auth';\n\nfunction ModelStats(props) {\n  if (props.errorCode) return React.createElement(Error, {\n    statusCode: props.errorCode\n  });\n  var selectedKeys = props.route.parsedUrl.pathname;\n\n  var _useState = useState(props.stats),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var doughnutData = {\n    labels: state.statsLabel.keys,\n    datasets: [{\n      data: state.statsLabel.values,\n      backgroundColor: ['#36A2EB', '#FFCE56', '#2ecc71', '#9b59b6', '#7ed6df', '#686de0'],\n      hoverBackgroundColor: ['#36A2EB', '#FFCE56', '#2ecc71', '#9b59b6', '#7ed6df', '#686de0']\n    }]\n  };\n  var lineData = {\n    labels: ['Jan', 'Febr', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Des'],\n    datasets: [{\n      data: state.statsTrainMonth.values,\n      label: new Date().getFullYear(),\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }]\n  };\n  return React.createElement(UserLayout, props, React.createElement(Row, {\n    type: \"flex\",\n    gutter: 32\n  }, React.createElement(Head, null, React.createElement(\"title\", null, \"My Model Stats - Sistem Anotasi Named Entity\")), React.createElement(Col, {\n    md: 6\n  }, React.createElement(ModelSider, {\n    current: selectedKeys,\n    dataSource: props.model\n  })), React.createElement(Col, {\n    md: 18\n  }, React.createElement(Card, {\n    style: {\n      padding: 24\n    }\n  }, React.createElement(Typography.Title, {\n    level: 4,\n    style: {\n      marginBottom: 32\n    }\n  }, \"Statistic Model\"), React.createElement(Row, {\n    gutter: 32\n  }, React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 60\n    }\n  }, React.createElement(Statistic, {\n    title: \"Verified\",\n    value: state.countVerified,\n    prefix: React.createElement(Icon, {\n      type: \"database\"\n    })\n  })), React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 60\n    }\n  }, React.createElement(Statistic, {\n    title: \"Not Verified\",\n    value: state.countUnverified,\n    prefix: React.createElement(Icon, {\n      type: \"container\"\n    })\n  })), React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 60\n    }\n  }, React.createElement(Statistic, {\n    title: \"Source processed\",\n    value: state.countTraining,\n    prefix: React.createElement(Icon, {\n      type: \"file-done\"\n    }),\n    suffix: \"/ \".concat(state.countSource + state.countUnverified + state.countVerified)\n  })), React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 60\n    }\n  }, React.createElement(Statistic, {\n    title: \"Contributed\",\n    prefix: React.createElement(Icon, {\n      type: \"team\"\n    }),\n    value: state.countContributed\n  })), React.createElement(Col, {\n    md: 24,\n    style: {\n      marginBottom: 60\n    }\n  }, React.createElement(Typography.Title, {\n    level: 4\n  }, \"Lasts Contributed\"), React.createElement(List, {\n    className: \"ant-custom\",\n    style: {\n      maxHeight: 300,\n      overflow: 'auto'\n    },\n    dataSource: state.tenContributed,\n    renderItem: function renderItem(item) {\n      return React.createElement(List.Item, null, React.createElement(List.Item.Meta, {\n        avatar: React.createElement(Avatar, {\n          style: {\n            backgroundColor: item.avatar\n          }\n        }, \"\".concat(item.firstname[0]).concat(item.lastname[0])),\n        style: {\n          maxHeight: 300,\n          overflow: 'auto'\n        },\n        title: \"\".concat(item.firstname, \" \").concat(item.lastname),\n        description: item.email\n      }), React.createElement(\"div\", null, moment(item.activityDate).fromNow()));\n    }\n  })), props.model.annotator !== 'question-answer' && React.createElement(Col, {\n    md: 24,\n    style: {\n      marginBottom: 60\n    }\n  }, React.createElement(Typography.Title, {\n    level: 4\n  }, \"Labels statistic\"), React.createElement(Doughnut, {\n    data: doughnutData\n  })), React.createElement(Col, {\n    xs: 24\n  }, React.createElement(Typography.Title, {\n    level: 4\n  }, \"Activity model\"), React.createElement(Line, {\n    data: lineData\n  })))))));\n}\n\nModelStats.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var apiUrl, token, query, id, modelApi, model, stats;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiUrl = _ref.apiUrl, token = _ref.token, query = _ref.query;\n            id = query.id;\n            modelApi = \"\".concat(apiUrl, \"/model/\").concat(id);\n            _context.prev = 3;\n            _context.next = 6;\n            return axios({\n              method: \"GET\",\n              url: modelApi,\n              headers: {\n                authorization: token\n              }\n            }).then(function (res) {\n              return res.data;\n            });\n\n          case 6:\n            model = _context.sent;\n            _context.next = 9;\n            return axios({\n              method: \"GET\",\n              url: \"\".concat(modelApi, \"/stats\"),\n              headers: {\n                authorization: token\n              }\n            }).then(function (res) {\n              return res.data;\n            });\n\n          case 9:\n            stats = _context.sent;\n            return _context.abrupt(\"return\", {\n              model: model,\n              stats: stats\n            });\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](3);\n            return _context.abrupt(\"return\", {\n              errorCode: _context.t0.response.status\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 13]]);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default withAuthSync(ModelStats);","map":null,"metadata":{},"sourceType":"module"}