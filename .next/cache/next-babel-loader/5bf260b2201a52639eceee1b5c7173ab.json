{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _ from 'lodash';\nimport axios from 'axios';\nimport React from 'react';\nimport Head from 'next/head';\nimport { Bar, Line } from 'react-chartjs-2';\nimport { withAuthSync } from '../utils/auth';\nimport { Row, Col, Card, Statistic, List, Avatar, Tag } from 'antd';\nimport AdminLayout from \"../components/AdminLayout\";\nvar initMonth = ['Jan', 'Febr', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Des'];\n\nfunction AdminDashboard(props) {\n  var logAnno = {\n    labels: initMonth,\n    datasets: [{\n      data: props.training.logTraining.values,\n      label: new Date().getFullYear(),\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }]\n  };\n  var logUser = {\n    labels: initMonth,\n    datasets: [{\n      data: props.user.logUser.values,\n      label: new Date().getFullYear(),\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10\n    }]\n  };\n  return React.createElement(AdminLayout, props, React.createElement(Card, {\n    title: \"Dashboard\",\n    bordered: false\n  }, React.createElement(Head, null, React.createElement(\"title\", null, \"Admin Dashboard - Sistem Anotasi Named Entity\")), React.createElement(Row, {\n    gutter: 16\n  }, React.createElement(Col, {\n    md: 10\n  }, React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Statistic, {\n    title: \"Model\",\n    value: props.model.countModel\n  }))), React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Statistic, {\n    title: \"User\",\n    value: props.user.countUser\n  }))), React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Statistic, {\n    title: \"Source\",\n    value: props.model.countSource\n  }))), React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Statistic, {\n    title: \"Source Used\",\n    value: props.training.countTraining\n  }))), React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Statistic, {\n    title: \"Training Verified\",\n    value: props.training.countTrainingVerified\n  }))), React.createElement(Col, {\n    md: 12,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Statistic, {\n    title: \"Training Unverified\",\n    value: props.training.countTrainingUnverified\n  }))), React.createElement(Col, {\n    md: 24,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Card.Meta, {\n    title: \"Top user\",\n    style: {\n      marginBottom: 16\n    }\n  }), React.createElement(List, {\n    itemLayout: \"horizontal\",\n    dataSource: props.user.fiveBestUserTraining,\n    renderItem: function renderItem(item, key) {\n      return React.createElement(List.Item, {\n        key: item.id\n      }, React.createElement(List.Item.Meta, {\n        avatar: React.createElement(Avatar, {\n          style: {\n            backgroundColor: item.avatar\n          }\n        }, [item.firstname[0], item.lastname[0]].join(\"\")),\n        title: [item.firstname, item.lastname].join(\" \"),\n        description: item.email\n      }), React.createElement(\"div\", null, item.sumTraining, \" Contributed\"));\n    }\n  }))), React.createElement(Col, {\n    md: 24,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Card.Meta, {\n    title: \"Top model\",\n    style: {\n      marginBottom: 16\n    }\n  }), React.createElement(List, {\n    itemLayout: \"horizontal\",\n    dataSource: props.model.fiveBestModelTraining,\n    renderItem: function renderItem(item, key) {\n      return React.createElement(List.Item, {\n        key: item.id\n      }, React.createElement(List.Item.Meta, {\n        avatar: React.createElement(Avatar, {\n          src: item.avatar.path\n        }),\n        title: item.name,\n        description: React.createElement(Tag, {\n          color: item.annotator !== 'extractor' ? '#74b9ff' : '#ff7675'\n        }, item.annotator)\n      }), React.createElement(\"div\", null, \"\".concat(item.sumTraining, \" Training\")));\n    }\n  })))), React.createElement(Col, {\n    md: 14\n  }, React.createElement(Col, {\n    md: 24,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Card.Meta, {\n    title: \"Log Annotation\",\n    style: {\n      marginBottom: 16\n    }\n  }), React.createElement(\"div\", null, React.createElement(Line, {\n    data: logAnno\n  })))), React.createElement(Col, {\n    md: 24,\n    style: {\n      marginBottom: 24\n    }\n  }, React.createElement(Card, null, React.createElement(Card.Meta, {\n    title: \"Log User\",\n    style: {\n      marginBottom: 16\n    }\n  }), React.createElement(\"div\", null, React.createElement(Bar, {\n    data: logUser,\n    width: 100,\n    height: 390,\n    options: {\n      maintainAspectRatio: false\n    }\n  }))))))));\n}\n\nAdminDashboard.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var apiUrl, token, apiModel, apiUser, apiTrain, fetchModelStats, fetchUserStats, fetchTrainingStats, _ref3, _ref4, model, user, training;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apiUrl = _ref.apiUrl, token = _ref.token;\n            apiModel = \"\".concat(apiUrl, \"/admin/model/stats\");\n            apiUser = \"\".concat(apiUrl, \"/admin/user/stats\");\n            apiTrain = \"\".concat(apiUrl, \"/admin/training/stats\");\n\n            fetchModelStats = function fetchModelStats() {\n              return axios({\n                method: 'GET',\n                url: apiModel,\n                headers: {\n                  authorization: token\n                }\n              });\n            };\n\n            fetchUserStats = function fetchUserStats() {\n              return axios({\n                method: 'GET',\n                url: apiUser,\n                headers: {\n                  authorization: token\n                }\n              });\n            };\n\n            fetchTrainingStats = function fetchTrainingStats() {\n              return axios({\n                method: 'GET',\n                url: apiTrain,\n                headers: {\n                  authorization: token\n                }\n              });\n            };\n\n            _context.next = 9;\n            return axios.all([fetchModelStats(), fetchUserStats(), fetchTrainingStats()]);\n\n          case 9:\n            _ref3 = _context.sent;\n            _ref4 = _slicedToArray(_ref3, 3);\n            model = _ref4[0];\n            user = _ref4[1];\n            training = _ref4[2];\n            return _context.abrupt(\"return\", {\n              model: model.data,\n              user: user.data,\n              training: training.data\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport default withAuthSync(AdminDashboard, 1);","map":null,"metadata":{},"sourceType":"module"}