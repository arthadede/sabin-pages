{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { Row, Descriptions, Typography, Table, Tag, Dropdown, Menu, Button, Icon, Badge, Card, Input, Modal, message } from \"antd\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport moment from \"moment\";\nimport { withAuthSync } from \"../utils/auth\";\nimport React, { useRef, useState } from \"react\";\nimport _ from \"lodash\";\nimport Highlighter from \"react-highlight-words\";\nimport AdminLayout from \"../components/AdminLayout\";\nimport sort from \"js-flock/sort\";\n\nfunction AdminModel(props) {\n  var searchInput = useRef(null);\n\n  var _useState = useState(props.model),\n      _useState2 = _slicedToArray(_useState, 2),\n      model = _useState2[0],\n      setModel = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filteredInfo = _useState6[0],\n      setFilteredInfo = _useState6[1];\n\n  var _useState7 = useState({}),\n      _useState8 = _slicedToArray(_useState7, 2),\n      sortedInfo = _useState8[0],\n      setSortedInfo = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      searchText = _useState10[0],\n      setSearchText = _useState10[1];\n\n  var handleDeleteSoft =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(ids, isDeleted) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios({\n                method: \"PATCH\",\n                url: \"\".concat(props.apiModel),\n                data: {\n                  ids: ids,\n                  isDeleted: isDeleted\n                },\n                headers: {\n                  authorization: props.token\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n\n              if (response.status === 200) {\n                message.success(\"Model updated successfully.\");\n                setModel(response.data);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleDeleteSoft(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleDestroy = function handleDestroy(ids) {\n    var handleOk =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios({\n                  method: \"DELETE\",\n                  url: \"\".concat(props.apiModel),\n                  headers: {\n                    authorization: props.token\n                  },\n                  data: {\n                    ids: ids\n                  }\n                });\n\n              case 2:\n                response = _context2.sent;\n\n                if (response.status === 200) {\n                  message.success(\"Model deleted successfully.\");\n                  setModel(response.data);\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function handleOk() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    Modal.confirm({\n      title: \"Are you sure?\",\n      content: \"You will not be able to recover this model.\",\n      okText: \"Yes\",\n      onOk: handleOk,\n      cancelText: \"Cancel\"\n    });\n  };\n\n  var getColumnSearchProps = function getColumnSearchProps(dataIndex) {\n    return {\n      filterDropdown: function filterDropdown(_ref3) {\n        var setSelectedKeys = _ref3.setSelectedKeys,\n            selectedKeys = _ref3.selectedKeys,\n            confirm = _ref3.confirm,\n            clearFilters = _ref3.clearFilters;\n        return React.createElement(\"div\", {\n          style: {\n            padding: 8\n          }\n        }, React.createElement(Input, {\n          ref: searchInput,\n          placeholder: \"Search \".concat(dataIndex),\n          value: selectedKeys[0],\n          onChange: function onChange(e) {\n            return setSelectedKeys(e.target.value ? [e.target.value] : []);\n          },\n          onPressEnter: function onPressEnter() {\n            return handleSearch(selectedKeys, confirm);\n          },\n          style: {\n            width: 188,\n            marginBottom: 8,\n            display: \"block\"\n          }\n        }), React.createElement(Button, {\n          type: \"primary\",\n          onClick: function onClick() {\n            return handleSearch(selectedKeys, confirm);\n          },\n          icon: \"search\",\n          size: \"small\",\n          style: {\n            width: 90,\n            marginRight: 8\n          }\n        }, \"Search\"), React.createElement(Button, {\n          onClick: function onClick() {\n            return handleReset(clearFilters);\n          },\n          size: \"small\",\n          style: {\n            width: 90\n          }\n        }, \"Reset\"));\n      },\n      filterIcon: function filterIcon(filtered) {\n        return React.createElement(Icon, {\n          type: \"search\",\n          style: {\n            color: filtered ? \"#1890ff\" : undefined\n          }\n        });\n      },\n      onFilter: function onFilter(value, record) {\n        return record[dataIndex].toString().toLowerCase().includes(value.toLowerCase());\n      },\n      onFilterDropdownVisibleChange: function onFilterDropdownVisibleChange(visible) {\n        if (visible) {\n          setTimeout(function () {\n            return searchInput.current.select();\n          });\n        }\n      },\n      render: function render(text) {\n        return React.createElement(Highlighter, {\n          className: \"table-text\",\n          highlightStyle: {\n            backgroundColor: \"#ffc069\",\n            padding: 0\n          },\n          searchWords: [searchText],\n          autoEscape: true,\n          textToHighlight: text.toString()\n        });\n      }\n    };\n  };\n\n  var handleSearch = function handleSearch(selectedKeys, confirm) {\n    confirm();\n    setSearchText(selectedKeys[0]);\n  };\n\n  var handleReset = function handleReset(clearFilters) {\n    clearFilters();\n    setSearchText(\"\");\n  };\n\n  var handleTable = function handleTable(pagination, filters, sorter) {\n    setFilteredInfo(filters);\n    setSortedInfo(sorter);\n  };\n\n  var handleRemoves = function handleRemoves() {\n    if (selected.length === 0) {\n      message.warning(\"Nothing was selected.\");\n      return;\n    }\n\n    handleDestroy(selected);\n  };\n\n  var handleMenuClick = function handleMenuClick(e, id) {\n    switch (e.key) {\n      case \"undelete_soft\":\n        handleDeleteSoft(id, false);\n        break;\n\n      case \"delete_soft\":\n        handleDeleteSoft(id, true);\n        break;\n\n      case \"destroy\":\n        handleDestroy(id);\n        break;\n    }\n  };\n\n  var columns = [_objectSpread({\n    title: \"Name\",\n    dataIndex: \"name\",\n    key: \"name\"\n  }, getColumnSearchProps(\"name\")), {\n    title: \"Author\",\n    dataIndex: \"author\",\n    key: \"author\",\n    width: 200\n  }, {\n    title: \"Type\",\n    dataIndex: \"isPrivate\",\n    width: 110,\n    align: \"center\",\n    render: function render(text) {\n      return React.createElement(Badge, {\n        status: !text ? \"green\" : \"blue\",\n        text: text ? \"Private\" : \"Public\"\n      });\n    }\n  }, {\n    title: \"Status\",\n    dataIndex: \"isDeleted\",\n    width: 110,\n    align: \"center\",\n    render: function render(text) {\n      return React.createElement(Badge, {\n        status: text ? \"error\" : \"success\",\n        text: text ? \"Disabled\" : \"Active\"\n      });\n    }\n  }, {\n    title: \"Last Modified\",\n    dataIndex: \"updatedAt\",\n    width: 200,\n    align: \"center\",\n    render: function render(text) {\n      return React.createElement(Typography.Text, null, moment(text).fromNow());\n    }\n  }, {\n    key: \"operation\",\n    width: 200,\n    align: \"right\",\n    render: function render(text, record) {\n      return React.createElement(Dropdown, {\n        overlay: React.createElement(Menu, {\n          onClick: function onClick(key) {\n            return handleMenuClick(key, record.id);\n          }\n        }, record.isDeleted && React.createElement(Menu.Item, {\n          key: \"undelete_soft\"\n        }, \"Recovery\"), !record.isDeleted && React.createElement(Menu.Item, {\n          key: \"delete_soft\"\n        }, \"Disable\"), React.createElement(Menu.Item, {\n          key: \"destroy\"\n        }, \"Delete\"))\n      }, React.createElement(Button, null, \"Actions \", React.createElement(Icon, {\n        type: \"down\"\n      })));\n    }\n  }];\n\n  var ExpandedComponent = function ExpandedComponent(record) {\n    var config = record.config;\n    var user = record.user;\n\n    var getAnnotator = function getAnnotator() {\n      return record.annotator === \"classifier\" ? \"Classifier\" : record.annotator === \"extractor\" ? \"Extractor\" : \"Pattern Extractor\";\n    };\n\n    return React.createElement(Descriptions, {\n      title: \"Model Information\",\n      bordered: true\n    }, React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Author\"\n    }, \"\".concat(user.firstname, \" \").concat(user.lastname)), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Name\"\n    }, record.name), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Description\"\n    }, React.createElement(Typography.Paragraph, null, record.desc)), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Labels\"\n    }, record.label && record.label.map(function (item, key) {\n      return React.createElement(Tag, {\n        key: key,\n        className: \"ant-custom\",\n        color: item.color\n      }, item.name);\n    })), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Annotator\"\n    }, getAnnotator()), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Type\"\n    }, record.isPrivate ? \"Private\" : \"Public\"), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Status\"\n    }, React.createElement(Badge, {\n      status: record.isDeleted ? \"error\" : \"success\",\n      text: record.isDeleted ? \"Not Active\" : \"Active\"\n    })), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"UI Stats\"\n    }, React.createElement(Badge, {\n      status: config.UIStats ? \"success\" : \"error\",\n      text: config.UIStats ? \"Active\" : \"Not Active\"\n    })), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"UI Annotation\"\n    }, React.createElement(Badge, {\n      status: config.UIAnnotation ? \"success\" : \"error\",\n      text: config.UIAnnotation ? \"Active\" : \"Not Active\"\n    })), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Created Date\"\n    }, moment(record.createdAt).fromNow()), React.createElement(Descriptions.Item, {\n      span: 3,\n      label: \"Updated Date\"\n    }, moment(record.updatedAt).fromNow()));\n  };\n\n  var CardExtra = [React.createElement(Button, {\n    key: \"0\",\n    type: \"danger\",\n    onClick: handleRemoves\n  }, \"Delete Selected\")];\n  return React.createElement(AdminLayout, props, React.createElement(Row, null, React.createElement(Head, null, React.createElement(\"title\", null, \"Admin Model - Sistem Anotasi Named Entity\")), React.createElement(Card, {\n    bordered: false,\n    title: \"Model Data\",\n    extra: CardExtra\n  }, React.createElement(Table, {\n    rowKey: \"id\",\n    scroll: {\n      x: 1100\n    },\n    columns: columns,\n    dataSource: model,\n    onChange: handleTable,\n    rowSelection: {\n      selectedRowKeys: selected,\n      onChange: function onChange(selectedRowKeys) {\n        setSelected(selectedRowKeys);\n      }\n    },\n    expandedRowRender: ExpandedComponent\n  }))));\n}\n\nAdminModel.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(_ref4) {\n    var apiUrl, token, apiModel, fetchModel, _ref6, _ref7, model;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            apiUrl = _ref4.apiUrl, token = _ref4.token;\n            apiModel = \"\".concat(apiUrl, \"/admin/model\");\n\n            fetchModel = function fetchModel() {\n              return axios({\n                method: \"GET\",\n                url: \"\".concat(apiUrl, \"/admin/model\"),\n                headers: {\n                  authorization: token\n                }\n              });\n            };\n\n            _context3.next = 5;\n            return axios.all([fetchModel()]);\n\n          case 5:\n            _ref6 = _context3.sent;\n            _ref7 = _slicedToArray(_ref6, 1);\n            model = _ref7[0];\n            return _context3.abrupt(\"return\", {\n              apiModel: apiModel,\n              model: model.data\n            });\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function (_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nexport default withAuthSync(AdminModel, 1);","map":null,"metadata":{},"sourceType":"module"}