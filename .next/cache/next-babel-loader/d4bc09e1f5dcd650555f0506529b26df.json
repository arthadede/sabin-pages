{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { Modal, Descriptions, Spin, Checkbox, Upload, Button, Typography, Table, message } from 'antd';\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport _ from 'lodash';\n\nfunction ModalAddSource(props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selected = _useState4[0],\n      setSelected = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      loadingText = _useState8[0],\n      setLoadingText = _useState8[1];\n\n  var handleUpload = function handleUpload(file) {\n    setLoading(true);\n    setLoadingText(\"Uploading...\");\n    var formData = new FormData();\n    formData.append('file', file);\n    axios({\n      method: 'POST',\n      url: '/source',\n      data: formData\n    }).then(function (res) {\n      if (res.status === 200) {\n        setState(res.data);\n      }\n    })[\"catch\"](function (err) {\n      message.error(err);\n    })[\"finally\"](function () {\n      setLoading(false);\n      setLoadingText(\"\");\n    });\n  };\n\n  var handleAdd = function handleAdd(data) {\n    return new _Promise(function (resolve, reject) {\n      axios({\n        method: \"PATCH\",\n        url: \"\".concat(props.modelApi, \"/source/add\"),\n        headers: {\n          authorization: props.token\n        },\n        data: {\n          json: data\n        }\n      }).then(function (res) {\n        return res.status === 200 && resolve(res.data);\n      })[\"catch\"](function (err) {\n        return reject(err);\n      });\n    });\n  };\n\n  var handleSubmit = function handleSubmit() {\n    if (!selected) {\n      message.warning(\"Please select any check for submit to source.\");\n      return;\n    }\n\n    setLoading(true);\n    setLoadingText(\"Importing Data...\");\n    var data = [];\n\n    _.forEach(state.sheets, function (item, key) {\n      var picked = _.pick(item, selected);\n\n      var result = _.values(picked);\n\n      data.push.apply(data, _toConsumableArray(result));\n    });\n\n    handleAdd(data).then(function (result) {\n      message.success(\"Added source successfully.\");\n      props.onOk(result.json);\n    })[\"catch\"](function () {\n      return message.error(\"Something wrong.\");\n    })[\"finally\"](function () {\n      setState(null);\n      setSelected([]);\n      setLoading(false);\n      setLoadingText(\"\");\n    });\n  };\n\n  var fileType = ['.csv', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-excel'];\n  var confUpload = {\n    accept: fileType.join(','),\n    showUploadList: false,\n    beforeUpload: function beforeUpload(file) {\n      if (!fileType.includes(file.type)) {\n        message.error('We only support CSV, XLS, or XLSX spreadsheet.');\n      } else if (file.size / 1024 / 1024 > 20) {\n        message.error('Please upload a file smaller than 20 MB.');\n      } else {\n        handleUpload(file);\n      }\n\n      return false;\n    }\n  };\n\n  var ComponentSheet = function ComponentSheet() {\n    if (state === null) return null;\n\n    var columnsArr = _.filter(state.columns, function (n) {\n      return n !== 'id';\n    });\n\n    var columns = _.map(columnsArr, function (item, key) {\n      return {\n        key: item,\n        width: 200,\n        title: React.createElement(Checkbox, {\n          value: item\n        }, \"Select Column\"),\n        render: function render(text, record) {\n          return React.createElement(\"div\", {\n            className: \"table-text\"\n          }, record[item]);\n        }\n      };\n    });\n\n    var dataSource = _.slice(state.sheets, 0, 10);\n\n    var propsTable = {\n      rowKey: 'id',\n      bordered: true,\n      columns: columns,\n      pagination: false,\n      dataSource: dataSource,\n      scroll: true\n    };\n    return React.createElement(\"div\", {\n      className: \"table-sheet\"\n    }, React.createElement(Typography.Title, {\n      level: 4\n    }, \"Select Source\"), React.createElement(Descriptions, null, React.createElement(Descriptions.Item, {\n      label: \"Total rows\"\n    }, state.sheets.length)), React.createElement(Checkbox.Group, {\n      style: {\n        display: 'block'\n      },\n      value: selected,\n      onChange: function onChange(val) {\n        return setSelected(val);\n      }\n    }, React.createElement(Table, _extends({}, propsTable, {\n      className: \"ant-custom table-sheet-wrapper\"\n    }))), React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      style: {\n        marginTop: 16\n      }\n    }, React.createElement(Button, {\n      type: \"primary\",\n      onClick: handleSubmit,\n      disabled: state.length === null\n    }, \"Submit\")));\n  };\n\n  var ComponentUpload = function ComponentUpload() {\n    return React.createElement(Upload.Dragger, confUpload, React.createElement(\"div\", {\n      style: {\n        height: 400,\n        width: 900,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }\n    }, React.createElement(Typography.Title, {\n      level: 4,\n      type: \"secondary\"\n    }, \"Click or drag file CSV or XLS\")));\n  };\n\n  return React.createElement(Modal, {\n    centered: true,\n    width: \"auto\",\n    visible: props.visible,\n    closable: state !== null,\n    maskClosable: state === null,\n    onCancel: function onCancel() {\n      setState(null);\n      props.onCancel();\n    },\n    footer: null\n  }, React.createElement(\"div\", null, React.createElement(Spin, {\n    tip: loadingText,\n    spinning: loading\n  }, state !== null && React.createElement(ComponentSheet, null), state === null && React.createElement(ComponentUpload, null))));\n}\n\nexport default ModalAddSource;","map":null,"metadata":{},"sourceType":"module"}